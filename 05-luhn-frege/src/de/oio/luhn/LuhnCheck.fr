module de.oio.luhn.LuhnCheck where

toDigits :: Integer -> [Integer]
toDigits n | n < 0 = error "n must be 0 or greater"
toDigits 0 = []
toDigits n = toDigits (n `div` 10) ++ [(n `mod` 10)]

toDigitsRev :: Integer -> [Integer]
toDigitsRev n = reverse (toDigits n)

double2nd :: [Integer] -> [Integer]
-- double2nd [] = []
-- double2nd [x] = [x]
-- double2nd (x : x' : xs) = x : 2 * x' : double2nd xs
double2nd = zipWith (*) (cycle [1, 2])

sumDigits :: [Integer] -> Integer
sumDigits xs = sum (concat (map toDigits xs))

isValid :: Integer -> Bool
isValid n = mod (sumDigits (double2nd (toDigitsRev n))) 10 == 0

isValid2 :: Integer -> Bool
isValid2 n = (mod . sumDigits . double2nd . toDigitsRev $ n) 10 == 0

numValid :: [Integer] -> Int
numValid = length . filter isValid2


creditcards :: [Integer]
creditcards = [ 4_716_347_184_862_961n,
                4_532_899_082_537_349n,
                4_485_429_517_622_493n,
                4_320_635_998_241_421n,
                4_929_778_869_082_405n,
                5_256_283_618_614_517n,
                5_507_514_403_575_522n,
                5_191_806_267_524_120n,
                5_396_452_857_080_331n,
                5_567_798_501_168_013n,
                6_011_798_764_103_720n,
                6_011_970_953_092_861n,
                6_011_486_447_384_806n,
                6_011_337_752_144_550n,
                6_011_442_159_205_994n,
                4_916_188_093_226_163n,
                4_916_699_537_435_624n,
                4_024_607_115_319_476n,
                4_556_945_538_735_693n,
                4_532_818_294_886_666n,
                5_349_308_918_130_507n,
                5_156_469_512_589_415n,
                5_210_896_944_802_939n,
                5_442_782_486_960_998n,
                5_385_907_818_416_901n,
                6_011_920_409_800_508n,
                6_011_978_316_213_975n,
                6_011_221_666_280_064n,
                6_011_285_399_268_094n,
                6_011_111_757_787_451n,
                4_024_007_106_747_875n,
                4_916_148_692_391_990n,
                4_916_918_116_659_358n,
                4_024_007_109_091_313n,
                4_716_815_014_741_522n,
                5_370_975_221_279_675n,
                5_586_822_747_605_880n,
                5_446_122_675_080_587n,
                5_361_718_970_369_004n,
                5_543_878_863_367_027n,
                6_011_996_932_510_178n,
                6_011_475_323_876_084n,
                6_011_358_905_586_117n,
                6_011_672_107_152_563n,
                6_011_660_634_944_997n,
                4_532_917_110_736_356n,
                4_485_548_499_291_791n,
                4_532_098_581_822_262n,
                4_018_626_753_711_468n,
                4_454_290_525_773_941n,
                5_593_710_059_099_297n,
                5_275_213_041_261_476n,
                5_244_162_726_358_685n,
                5_583_726_743_957_726n,
                5_108_718_020_905_086n,
                6_011_887_079_002_610n,
                6_011_119_104_045_333n,
                6_011_296_087_222_376n,
                6_011_183_539_053_619n,
                6_011_067_418_196_187n,
                4_532_462_702_719_400n,
                4_420_029_044_272_063n,
                4_716_494_048_062_261n,
                4_916_853_817_750_471n,
                4_327_554_795_485_824n,
                5_138_477_489_321_723n,
                5_452_898_762_612_993n,
                5_246_310_677_063_212n,
                5_211_257_116_158_320n,
                5_230_793_016_257_272n,
                6_011_265_295_282_522n,
                6_011_034_443_437_754n,
                6_011_582_769_987_164n,
                6_011_821_695_998_586n,
                6_011_420_220_198_992n,
                4_716_625_186_530_516n,
                4_485_290_399_115_271n,
                4_556_449_305_907_296n,
                4_532_036_228_186_543n,
                4_916_950_537_496_300n,
                5_188_481_717_181_072n,
                5_535_021_441_100_707n,
                5_331_217_916_806_887n,
                5_212_754_109_160_056n,
                5_580_039_541_241_472n,
                6_011_450_326_200_252n,
                6_011_141_461_689_343n,
                6_011_886_911_067_144n,
                6_011_835_735_645_726n,
                6_011_063_209_139_742n,
                  379_517_444_387_209n,
                  377_250_784_667_541n,
                  347_171_902_952_673n,
                  379_852_678_889_749n,
                  345_449_316_207_827n,
                  349_968_440_887_576n,
                  347_727_987_370_269n,
                  370_147_776_002_793n,
                  374_465_794_689_268n,
                  340_860_752_032_008n,
                  349_569_393_937_707n,
                  379_610_201_376_008n,
                  346_590_844_560_212n,
                  376_638_943_222_680n,
                  378_753_384_029_375n,
                  348_159_548_355_291n,
                  345_714_137_642_682n,
                  347_556_554_119_626n,
                  370_919_740_116_903n,
                  375_059_255_910_682n,
                  373_129_538_038_460n,
                  346_734_548_488_728n,
                  370_697_814_213_115n,
                  377_968_192_654_740n,
                  379_127_496_780_069n,
                  375_213_257_576_161n,
                  379_055_805_946_370n,
                  345_835_454_524_671n,
                  377_851_536_227_201n,
                  345_763_240_913_232n
              ]

main _ = do
    println "Expect [1, 2, 3, 4]: "
    print   "       "
    println (toDigits 1_234n)

    println "Expect [4, 3, 2, 1]: "
    print   "       "
    println (toDigitsRev 1_234n)

    println "Expect [8, 14, 6, 10]: "           -- even case
    print   "       "
    println (double2nd [8, 7, 6, 5])

    println "Expect [8, 14, 6]: "               -- uneven case
    print   "       "
    println (double2nd [8, 7, 6])

    println "Expect [1, 16, 8, 2, 8, 16, 8, 16, 8, 16, 8, 16, 2, 2, 0, 8]: "
    print   "       "
    println (double2nd (toDigitsRev 4_012_888_888_881_881n))

    println "Expect 20: "
    print   "       "
    println (sumDigits [8, 14, 6, 10])

    println "Expect 30: "
    print   "       "
    println (sumDigits [3,  9, 4, 15, 8])

    println "Expect 90: "
    print   "       "
    println (sumDigits [9, 9, 9, 9, 9, 9, 9, 9, 9, 9])

    println "Expect true: "
    print   "       "
    println (isValid2 4_012_888_888_881_881n)

    println "Expect false: "
    print   "       "
    println (isValid2 4_012_888_888_881_891n)

    println "Expect true:"
    print   "       "
    println (numValid (creditcards) == 94)
